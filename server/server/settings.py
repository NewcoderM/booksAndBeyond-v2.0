"""
Django settings for server project.

Generated by 'django-admin startproject' using Django 4.2.19.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
# from dotenv import load_dotenv
from urllib.parse import urlparse
import os
import dj_database_url

if os.path.isfile("env.py"):
    import env

# load_dotenv()
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY")


from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

CORS_ALLOW_ALL_ORIGINS = True

CSRF_COOKIE_SECURE = True

SESSION_COOKIE_SECURE = True

# Serving static files (CSS, JS)
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000", 
    "http://localhost:5173", 
    "http://localhost:4173", 
    "http://127.0.0.1:3000", 
    "http://127.0.0.1:5173", 
    "http://127.0.0.1:4173", 
]

ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
]

PORT = os.getenv('PORT', '8080')

CORS_ALLOW_CREDENTIALS = True

# Application definition

INSTALLED_APPS = [
    'corsheaders',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
    "cloudinary",
    "cloudinary_storage",


    'rest_framework',
    'rest_framework.authtoken',

    # Your apps
    'customer',
    'books',
    'contact'
]

CSRF_COOKIE_SECURE = True
SESSION_COOKIE_SECURE = True


MIDDLEWARE = [
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'server.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
    ]
}

WSGI_APPLICATION = 'server.wsgi.application'


# Database

# Load DATABASE_URL environment variable
# DATABASE_URL = os.getenv("DATABASE_URL", "postgresql://neondb_owner:npg_Kf9M1PjAXiaL@ep-patient-voice-a2fqzl49.eu-central-1.aws.neon.tech/strut_pager_smog_679201")

# Parse the DATABASE_URL
# url = urlparse(DATABASE_URL)

# Configure Django's database settings
DATABASES = {
'default': dj_database_url.parse(os.environ.get("DATABASE_URL"), conn_max_age=600, ssl_require=True)
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

import cloudinary
import cloudinary.uploader
import cloudinary.api

CLOUDINARY_URL = os.getenv("CLOUDINARY_URL")

CLOUDINARY_STORAGE = {
    'CLOUDINARY_URL': CLOUDINARY_URL,
}

DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'

AUTH_USER_MODEL = 'customer.Customer'